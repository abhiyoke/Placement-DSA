1.Bfs :
function bfsOfGraph(V, adj):
    create array vis of size V initialized to 0
    set vis[0] to 1
    create empty queue q
    push 0 to q
    create empty list bfs
    while q is not empty:
        node = q.front()
        q.pop()
        append node to bfs
        for each neighbor in adj[node]:
            if vis[neighbor] is 0:
                set vis[neighbor] to 1
                q.push(neighbor)
    return bfs
2. dfs :
function dfs(node, adj, vis, ls):
    set vis[node] to 1
    append node to ls
    for each neighbor in adj[node]:
        if vis[neighbor] is 0:
            dfs(neighbor, adj, vis, ls)

3.no. of provinces (connected components):
function countProvinces(V, adjLs):
    create array vis of size V initialized to 0
    set cnt to 0
    for i from 0 to V-1:
        if vis[i] is 0:
            increment cnt
            dfs(i, adjLs, vis)
    return cnt
function dfs(node, adjLs, vis):
    set vis[node] to 1
    for each neighbor in adjLs[node]:
        if vis[neighbor] is 0:
            dfs(neighbor, adjLs, vis)
4.Rotton oranges :
function orangesRotting(grid):
    n = number of rows in grid
    m = number of columns in grid
    create a queue q
    cntf = 0
    for i from 0 to n-1:
        for j from 0 to m-1:
            if grid[i][j] == 2:
                push (i, j, 0) to q
            if grid[i][j] == 1:
                cntf += 1
    tm = 0
    drow = [-1, 0, 1, 0]
   dcol = [0, 1, 0, -1]
    cnt = 0
    while q is not empty:
        (r, c, t) = q.front()
        q.pop()
        tm = max(tm, t)
        for i from 0 to 3:
            nrow = r + drow[i]
            ncol = c + dcol[i]
            if nrow >= 0 and nrow < n and ncol >= 0 and ncol < m and grid[nrow][ncol] == 1:
                grid[nrow][ncol] = 2
                cnt += 1
                push (nrow, ncol, t+1) to q
    if cnt != cntf:
        return -1
    return tm
